[{"name": "app.py", "content": "from shiny import App, ui, render, reactive\nfrom faicons import icon_svg\nimport pandas as pd\nimport data_utils as du\nimport shinyswatch\nfrom pathlib import Path\nfrom input_data import default_checkbox, default_select, questions\n\n### ----- Front end: User interface ----- ###\n\napp_ui = ui.page_fluid(\n    # TODO: select theme? shinyswatch.theme.sketchy(),\n    shinyswatch.theme_picker_ui(),\n    ui.panel_title(\"Workflow Explorer\"),\n    ui.layout_sidebar(\n        # Question panel\n        ui.panel_sidebar(\n            [\n                du.input_question(id, q.get(\"label\"), q.get(\"choices\"), q.get(\"type\"))\n                for id, q in questions.items()\n            ],\n            ui.input_action_button(\n                \"reset\",\n                \"Clear choices\",\n                width=\"30%\",\n            ),\n        ),\n        # Answer table\n        ui.panel_main(\n            ui.output_ui(\"workflow_cards\")\n            ),\n    ),\n    # Styling\n    ui.include_css(Path(__file__).parent / \"static/styles/main.css\"),\n    ui.panel_absolute(\n        ui.div(\n            ui.tags.a(\n                icon_svg(\"github\", width=\"45px\", height=\"48px\"),\n                href=\"https://github.com/sdsc-ordes/workflow-explorer\",\n                target=\"_blank\",\n            ),\n        ),\n        top=\"1%\",\n        right=\"1%\",\n    ),\n)\n\n### ---------------------------- ###\n\n### ----- Back end: server ----- ###\n\n\ndef server(input, output, session):\n    wf_tab = pd.read_csv(Path(__file__).parent / \"workflowTable.tsv\", sep=\"\\t\")\n\n    # TODO: remove to use a fixed theme\n    shinyswatch.theme_picker_server()\n\n    # Reset event\n    @reactive.Effect\n    @reactive.event(input.reset)\n    def _():\n        for id, value in default_select.items():\n            ui.update_select(id=id, selected=value)\n        for id, value in default_checkbox.items():\n            ui.update_checkbox_group(id, selected=value)\n\n    # Workflow filter\n    def filter():\n        filtered_wf = wf_tab.copy()\n        for q_name in questions:\n            filtered_wf = du.filter_replies(q_name, input[q_name](), filtered_wf)\n        return filtered_wf\n    \n    # Render workflow cards\n    @output\n    @render.ui\n    def workflow_cards():\n        filtered_wf = filter()\n        cards = du.generate_cards(filtered_wf)\n        return ui.layout_column_wrap(*cards, width=1 / 3)\n\n### ---------------------------- ###\n\napp = App(app_ui, server)\n", "type": "text"}, {"name": "data_utils.py", "content": "\"\"\"Utils function related to input data management\"\"\"\n\nimport pandas as pd\nfrom typing import Iterable, List, Union, Optional\nfrom shiny import ui\nfrom input_data import questions\nfrom faicons import icon_svg\n\n# Input functions\n\n\ndef input_question(id: str, label: str, choices: List[str], type: str):\n    \"\"\"Select ui group based on the question type\"\"\"\n    if type == \"select\":\n        return ui.input_select(id, label, choices)\n    elif type == \"checkbox\":\n        return ui.input_checkbox_group(id, label, choices)\n    else:\n        raise ValueError(f\"Unknown question type: {type}\")\n\n\n# Filter functions\n\n\ndef filter_replies(\n    q_name: str, answer: Optional[Union[str, Iterable]], workflows: pd.DataFrame\n) -> pd.DataFrame:\n    \"\"\"Apply specific filter functions for each question\"\"\"\n    match q_name:\n        case \"lang\":\n            return filter_lang(answer, workflows)\n        case \"k8\" | \"containers\" | \"combo\":\n            return filter_CEQ(q_name, answer, workflows)\n        # TODO: Maybe worth changing the name in workflowTable.tsv\n        case \"ml\":\n            return filter_CEQ(\"ML-compatible\", answer, workflows)\n        case \"format\":\n            return filter_format(answer, workflows)\n        case \"goal\":\n            return filter_goal(answer, workflows)\n        case _:\n            Warning(f\"No filter for {q_name} defined.\")\n            return workflows\n\n\ndef filter_CEQ(q_name: str, answer: str, workflows: pd.DataFrame) -> pd.DataFrame:\n    \"\"\"Workflow filter for closed-ended questions with only yes(yes-but) and no as possible answers\"\"\"\n    if answer == \"Not relevant\":\n        return workflows\n    elif answer == \"yes\":\n        return workflows[\n            (workflows[q_name] == \"yes\") | (workflows[q_name] == \"yes-but\")\n        ]\n    else:\n        return workflows[(workflows[q_name] == \"no\")]\n\n\ndef filter_lang(answer: str, workflows: pd.DataFrame) -> pd.DataFrame:\n    \"\"\"Workflow filter for language question\"\"\"\n    if answer == \"Not relevant\":\n        return workflows\n    elif answer == \"yes\":\n        return workflows[\n            (workflows[\"language\"] == \"Python\")\n            | (workflows[\"language\"] == \"Language-agnostic\")\n        ]\n    else:\n        return workflows[(workflows[\"language\"] != \"Python\")]\n\n\ndef filter_format(answer: Optional[Iterable], workflows: pd.DataFrame) -> pd.DataFrame:\n    \"\"\"Workflow filter based on selected formats\"\"\"\n    if not answer:\n        return workflows\n    else:\n        formats = [format for format in answer]\n    return workflows[(workflows[\"format\"].isin(formats))]\n\n\ndef filter_goal(answer: str, workflows: pd.DataFrame) -> pd.DataFrame:\n    \"\"\"Workflow filter based on teh overall goal\"\"\"\n    if answer == \"Not relevant\":\n        return workflows\n    elif answer == \"full automation\":\n        return workflows[(workflows[\"goal\"] == \"auto\")]\n    else:\n        return workflows[(workflows[\"goal\"] == \"pipeline\")]\n\n# Workflow cards generator\n\ndef generate_cards(filtered_wf: pd.DataFrame) -> List[ui.card]:\n    \"\"\"Generate cards for each workflow in the filtered data frame\"\"\"\n    cards = []\n    for i, row in filtered_wf.iterrows():\n        cards.append(\n            ui.card(\n                ui.card_header(\n                    ui.tags.img(src=row[\"icon\"], class_=\"center\"),\n                    ),\n                ui.p(\"Name: \", row[\"name\"], class_=\"text\"),\n                ui.p(icon_svg(\"code\"), row[\"format\"], class_=\"text\"),\n                # TODO: consider if footer can be used for more details\n                # ui.card_footer(\n                #     ui.tags.a(\n                #         \"More details\",\n                # ),\n                # )\n            )\n        )\n    return cards", "type": "text"}, {"name": "input_data.py", "content": "\"\"\" Definitions and specifications of all input data \"\"\"\n\n# Answers\nyn_choices = [\"Not relevant\", \"yes\", \"no\"]\nformat_choices = [\"Python\", \"YAML\", \"R\", \"Groovy\"]\ngoal_choices = [\"Not relevant\", \"full automation\", \"reproducibility only\"]\n\n\n# Questions\nquestions = {\n    \"lang\": {\n        \"label\": \"Is your workflow using only Python as language?\",\n        \"choices\": yn_choices,\n        \"type\": \"select\",\n    },\n    \"k8\": {\n        \"label\": \"Are you working or planning to work with Kubernetes?\",\n        \"choices\": yn_choices,\n        \"type\": \"select\",\n    },\n    \"ml\": {\n        \"label\": \"Are you using sklearn, tensorflow or other ML/AI libraries?\",\n        \"choices\": yn_choices,\n        \"type\": \"select\",\n    },\n    \"containers\": {\n        \"label\": \"Are you using or planning to use containers?\",\n        \"choices\": yn_choices,\n        \"type\": \"select\",\n    },\n    \"format\": {\n        \"label\": \"Which format and/or language are you comfortable with?\",\n        \"choices\": format_choices,\n        \"type\": \"checkbox\",\n    },\n    \"goal\": {\n        \"label\": \"Is your end goal full automation (reproducibility+scheduling) or reproducibility only?\",\n        \"choices\": goal_choices,\n        \"type\": \"select\",\n    },\n    \"combo\": {\n        \"label\": \"Would you like to combine workflow managers for different aspects of your workflow?\",\n        \"choices\": yn_choices,\n        \"type\": \"select\",\n    },\n}\n\n# Defaults\n\n## Defaults select\ndefault_select = {\n    \"lang\": \"Not relevant\",\n    \"k8\": \"Not relevant\",\n    \"ml\": \"Not relevant\",\n    \"containers\": \"Not relevant\",\n    \"goal\": \"Not relevant\",\n    \"combo\": \"Not relevant\",\n}\n\n## Defaults checkbox\ndefault_checkbox = {\"format\": []}\n", "type": "text"}, {"name": "workflowTable.tsv", "content": "name\tlanguage\tk8\tML-compatible\tcontainers\tformat\tgoal\tcombo\ticon\nAirFlow\tLanguage-agnostic\tyes\tyes\tyes\tPython\tauto\tyes\thttps://raw.githubusercontent.com/apache/airflow/b402f8a35633beb4a41e09365a57008c67d377e8/docs/apache-airflow/img/logos/github_repository_social_image.png\nArgo\tLanguage-agnostic\tyes\tyes\tyes\tYAML\tauto\tyes\thttps://raw.githubusercontent.com/argoproj/argo-workflows/main/docs/assets/argo.png\nDVC\tPython\tno\tyes\tno\tYAML\tauto\tno\thttps://raw.githubusercontent.com/iterative/dvc.org/2ccb7e976f5f5b0696d49a7a85c32fffe6d76ebc/static/img/logos/dvc.svg\nDagster\tPython\tyes-but\tyes\tyes\tPython\tauto\tno\thttps://raw.githubusercontent.com/dagster-io/dagster/de7fc9b07557b0dfcd94a5fd0ff5aba3837003d1/docs/next/public/assets/logos/dagster-logo.svg\nDigdag\tLanguage-agnostic\tyes\tyes-but\tyes\tYAML\tauto\tno\thttps://raw.githubusercontent.com/treasure-data/digdag/master/digdag-docs/src/_static/logo/logo-digdag-rec-wt.png\nHamilton\tPython\tno\tyes\tno\tPython\tpipeline\tyes\thttps://www.tryhamilton.dev/img/hamilton_logo_transparent_bkgrd.ico\nKedro\tPython\tyes\tyes-but\tyes\tPython\tpipeline\tyes\thttps://raw.githubusercontent.com/kedro-org/kedro-brand-identity/main/horizontal/color/kedro-horizontal-color-on-light.svg\nLuigi\tPython\tyes\tyes-but\tyes\tPython\tpipeline\tyes\thttps://raw.githubusercontent.com/spotify/luigi/master/doc/luigi.png\nMetaflow\tPython\tyes-but\tyes\tyes\tPython\tpipeline\tyes\thttps://raw.githubusercontent.com/Netflix/metaflow/7e0564cbeb480299d7ae4c382aa094ee7207f202/docs/metaflow.svg\nNextflow\tLanguage-agnostic\tyes-but\tyes\tyes\tGroovy\tpipeline\tyes\thttps://raw.githubusercontent.com/nextflow-io/trademark/26e6fbc0830b0ff2b1af9df279cd22a48f37e14d/nextflow-logo-bg-light.svg\nPachyderm\tPython\tyes\tyes\tno\tYAML\tauto\tno\thttps://www.pachyderm.com/wp-content/uploads/2021/12/PachydermFeatured.jpg\nPrefect\tPython\tyes-but\tno\tno\tPython\tauto\tno\thttps://raw.githubusercontent.com/PrefectHQ/prefect/4bf831bf2e7f97f9fcf0f13d9ab9d3e15c804aca/ui/src/assets/logos/prefect-logo-gradient-navy.svg\nSnakemake \tLanguage-agnostic\tyes-but\tyes\tyes\tPython\tpipeline\tyes\thttps://raw.githubusercontent.com/snakemake/snakemake/d99b3a0ec43f29da0f2545d9664da4233eeb5e48/docs/_static/logo-snake.svg\nTargets \tR\tno\tno\tno\tR\tpipeline\tyes\thttps://raw.githubusercontent.com/ropensci/targets/d71b987df49a63402cf416c2403ece306b5f71c1/man/figures/logo.svg", "type": "text"}, {"name": "static/styles/main.css", "content": " /* main.css */\n\n /* unvisited link */\na:link {\n    color: black;\n}\n/* visited link */\na:visited {\n    color: black;\n}\n/* mouse over link */\na:hover {\n    color: hotpink;\n}\n/* selected link */\na:active {\n    color: black;\n}\n/* center images */\n.center {\n    display: block;\n    margin-left: auto;\n    margin-right: auto;\n    width: 120px;\n    height: 60px;\n}\n/* text format */\n.text {\n    font: normal normal 13px/1.2 \"arial\";\n    letter-spacing: 0px;\n}\n", "type": "text"}]