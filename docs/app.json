[{"name":"app.R","content":"# workflowExplorer app demo\n\nlibrary(shiny)\nlibrary(tidyverse)\nlibrary(here)\n\nhere::i_am(\"app.R\")\n\nui <- fluidPage(\n  titlePanel(\"Workflow explorer\"),\n  \n  sidebarLayout(\n    sidebarPanel(\n      helpText(\"Select different constraints to find a workflow manager for you\"),\n      \n      selectInput(\"lang\", \"Is your workflow using only Python as language?\",\n                  choices = c(\"Not relevant\",\n                              \"yes\", \n                              \"no\")\n      ),\n      \n      selectInput(\"k8\", \"Are you working or planning to work with Kubernetes?\",\n                  choices = c(\"Not relevant\",\n                              \"yes\", \n                              \"no\")\n      ),\n      \n      selectInput(\"ml\", \"Are you using sklearn, tensorflow or other ML/AI libraries?\",\n                  choices = c(\"Not relevant\",\n                              \"yes\", \n                              \"no\")\n      ),\n      \n      selectInput(\"containers\", \"Are you using or planning to use containers?\",\n                  choices = c(\"Not relevant\",\n                              \"yes\", \n                              \"no\")\n      ),\n      \n      checkboxGroupInput(\"format\", \"Which format and/or language are you comfortable with?\",\n                         choices = c(\"Python\",\n                                     \"YAML\", \n                                     \"JSON\",\n                                     \"R\",\n                                     \"Groovy\")\n      ),\n      \n      selectInput(\"goal\", \"Is your end goal full automation (reproducibility+scheduling) or reproducibility only?\",\n                  choices = c(\"Not relevant\",\n                              \"full automation\", \n                              \"reproducibility only\")\n      ),\n      \n      selectInput(\"combo\", \"Would you like to separate the pipeline and the automated scheduling?\",\n                  choices = c(\"Not relevant\",\n                              \"yes\", \n                              \"no\")\n      )\n      \n    ),\n    mainPanel(\n      tableOutput(\"filtered_workflow_list\")\n    )\n  )\n)\n\n# Define server logic required to draw a histogram\nserver <- function(input, output) {\n  \n  output$filtered_workflow_list <- renderTable(\n    {\n      \n      workflowTable <- read.delim(here(\"workflowTable.tsv\"))\n      if (input$lang != \"Not relevant\") {\n        if (input$lang == \"yes\") {\n          workflowTable <- workflowTable %>%\n            filter(language == \"Python\")\n        } else {\n          workflowTable <- workflowTable %>%\n            filter(language != \"Python\")\n        }\n        \n      }\n      \n      if (input$k8 != \"Not relevant\") {\n        if (input$k8 == \"yes\") {\n          workflowTable <- workflowTable %>%\n            filter(k8 == input$k8 | k8 == \"yes-but\")\n        } else {\n          workflowTable <- workflowTable %>%\n            filter(k8 == input$k8)\n        }\n      }\n      \n      if (input$containers != \"Not relevant\") {\n        workflowTable <- workflowTable %>%\n          filter(containers == input$containers)\n      }\n      \n      if (input$ml != \"Not relevant\") {\n        workflowTable <- workflowTable %>%\n          filter(ML-compatible == input$ml)\n      }\n      \n      if (!is.null(input$format)) {\n        workflowTable <- workflowTable %>%\n          filter(format %in% input$format)\n      }\n      \n      if (input$goal != \"Not relevant\") {\n        if (input$goal == \"full automation\") {\n          workflowTable <- workflowTable %>%\n            filter(goal == \"auto\")\n        } else {\n          workflowTable <- workflowTable %>%\n            filter(goal == \"pipeline\")\n        }\n      }\n      \n      if (input$combo != \"Not relevant\") {\n        workflowTable <- workflowTable %>%\n          filter(combo == input$combo)\n      }\n      \n      workflowTable\n    }\n  )\n  \n}\n\n# Run the application \nshinyApp(ui = ui, server = server, options = list(launch.browser = TRUE))\n","type":"text"},{"name":"workflowTable.tsv","content":"name\tlanguage\tk8\tML-compatible\tcontainers\tformat\tgoal\tcombo\nAirFlow\tLanguage-agnostic\tno\tyes\tyes\tPython\tauto\tyes\nArgo\tLanguage-agnostic\tyes\tyes\tyes\tYAML\tauto\tyes\nDVC\tPython\tno\tyes\tno\tYAML\tauto\tno\nDagster\tPython\tyes-but\tyes\tyes\tPython\tauto\tno\nDigdag\tLanguage-agnostic\tyes\tyes-but\tyes\tYAML\tauto\tno\nHamilton\tPython\tno\tyes\tno\tPython\tpipeline\tyes\nKedro\tPython\tyes\tyes-but\tyes\tPython\tpipeline\tyes\nLuigi\tPython\tyes\tyes-but\tyes\tPython\tpipeline\tyes\nMetaflow\tPython\tyes-but\tyes\tyes\tPython\tpipeline\tyes\nNextflow\tLanguage-agnostic\tyes-but\tyes\tyes\tGroovy\tpipeline\tyes\nPachyderm\tPython\tyes\tyes\tno\tYAML\tauto\tno\nPrefect\tPython\tyes-but\tno\tno\tPython\tauto\tno\nSnakemake \tLanguage-agnostic\tyes-but\tyes\tyes\tPython\tpipeline\tyes\nTargets \tR\tno\tno\tno\tR\tpipeline\tyes","type":"text"}]
